<html>
<!-- Creation date: 12/04/2002 -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>VirtualNet: network simulation with JavaRMI. Local example</title>
<meta name="Description" content="VirtualNet">
<meta name="Keywords" content="java RMI network simulation">
<meta name="Author" content="Luis Pena">
<meta name="Generator" content="AceHTML 4 Pro">
</head>
<body>

<table width="95%" border="0">
    <tr>
      <td width="150" align="left" valign="top" bgcolor="#BBBBFF">
	  	<center><br>
	    <font color="#4444ff"><b>VirtualNet</b></font>		
		<table width="92%" border="1" align="center">
		    <tr><td bgcolor="#BBDDDD"><font size="-1"><center>
         		<hr size="1" color="#7777FF" width="95%">				
				<font color="#4444ff"><b>Local example</b></font><br>
         		<hr size="1" color="#7777FF" width="95%">				
				<a href="index.htm">Overview</a><br>
				<a href="availability.htm">Availability</a><br>
				<a href="interface.htm">Interface</a><br>
				<a href="packages.htm">Packages</a><br>
				<a href="rmiExample.htm">RMI example</a><br>
				<a href="executables.htm">Executables</a><br>
				<a href="versions.htm">Versions</a><br>
         		<hr size="1" color="#7777FF" width="95%">				
			</center></font></td></tr>
		</table>
				
		<hr size="1" color="#7777FF" width="80%">				
		<br>
    	<p><a href="../index.htm">Home</a></p>
    	<p><a href="../filesplit/index.htm">FileSplit</a></p>
    	<p><a href="../idldepend/index.htm">IDL depend</a></p>
    	<p><a href="../menu/index.htm">Menu Applet</a></p>
    	<p><a href="http://grasia.fdi.ucm.es/sensei">Sensei</a></p>
    	<p><a href="../splitimage/index.htm">SplitImage</a></p>
    	<p><a href="../virtualnet2/index.htm">VirtualNet 2</a></p>
		
		<hr size="1" color="#7777FF" width="80%">		
		<a href="mailto:java_lmp@yahoo.co.uk?subject=webpage"><font size="-1">java_lmp@yahoo.co.uk</font></a><br><br>
		<font size="-1"><b><i><font color="#4444ff">Last Updated:<br> 3rd September 2003</font></i></b></font>		
		<hr size="1" color="#7777FF" width="80%">		
	    </center>
	  </td>
		
      <td width="4">
	  </td>

	  
	  <td valign="top">
		<hr size="2" color="#663366" width="400">
        <center><font size="+3" color="#663366"><b><i>VirtualNet <font size="+1">(over RMI)</font></i></b></font></center>
		<hr size="2" color="#663366" width="300">
        <center><font size="+2" color="#663366"><b><i>Local example</i></b></font></center>
		<hr size="2" color="#663366" width="400">
	
		<br>	    
        <table border="0"><tr><td width="5"></td><td>
           <ul type=square>
           <li><a href="#Interface">Declaring the interface</a>
           <li><a href="#Implementation">Implementing the interface</a>
           <li><a href="#Program">How to use virtual net and the server</a>
           <li><a href="#Execution">Executing the application</a>
           <li><a href="#Download">Download the example</a>
           </ul>
           <br>
           <a name="Interface"><b><i>Declaring the interface</i></b></a>
           <hr width=50% align=left size=2>
           The local version of <EM>Virtual Net</EM> requires every server to implement an interface where it declares its services. This interface has to extend the <i>vnet.local.VirtualRemote</i> interface. There is another requirement: each of the methods of the interface has to throw the exception <i>vnet.local.VirtualNetException</i><br>
           It is also possible that the server implements more than one interface; in this case, all these interfaces have to extend the <i>vnet.local.VirtualRemote</i> interface. <br>
           For this example, the server is going to give only one service: it returns a phone number, those used for its initialization.<br> The code for this interface is:<br>
           <font size="-1"><pre>
import vnet.*;
import vnet.local.*;
           
public interface PhoneNumbersIntf extends VirtualRemote
{
 public String getNumber() throws VirtualNetException;
}
           </pre></font>
           <br>
           <br>
           <br>
           <a name="Implementation"><b><i>Implementing the interface</i></b></a>
           <hr width=50% align=left size=2>
           Here is the code for a server that implements the previous interface:<br>
           <font size="-1"><pre>
import vnet.*;
import vnet.local.*;
           
public class PhoneNumbersServer implements PhoneNumbersIntf
{
 public PhoneNumbersServer(String number)
 {
  Number=number;
 }
 public String getNumber() throws vnet.VirtualNetException
 {
  return Number;
 }
 String Number;
}
           </pre></font>
           <br>
           <br>
           <br>
           <a name="Program"><b><i>How to use virtual net and the server</i></b></a>
           <hr width=50% align=left size=2>
           The following is a very small apllication using the previous server. It creates some windows to follow the net state, and will finish with a communication exception.<br>
		   <font size="-1"><pre>
import java.awt.Dimension;
           
import vnet.*;
import vnet.display.*;
import vnet.local.*;
           
public class PhoneProof
{
 public static void main(String args[])
 {
  try
  {
   System.out.println("Initializing");
   VirtualNet net=new VirtualNet();
   new BuildNetLayout("+a+e+i+m+o+a1e+e2i+e3m+i4m+m5o",net);
   new GraphNetFrame(new GraphNet(net,new GraphGeometryCircle()), 
     "Local test", new Dimension(200,200));
   new ConsoleNetFrame(net,"Local Test",new Dimension(300,300));
   new ListBindsFrame(new ListBindsNet(net),"Binded servers",
     new Dimension(200,300));
           			
   System.out.println("Creating servers");
   PhoneNumbersIntf pLmp=new PhoneNumbersServer("763.27.17");
   PhoneNumbersIntf pSLmp=new PhoneNumbersServer("859.82.94");
           			
   System.out.println("Creating nodes");
   NodeId a=new NodeId("a");
   NodeId d=new NodeId("m");
   NodeId e=new NodeId("o");
           		
   System.out.println("Binding servers");
   net.bind(d,"LMP phone",pLmp);
   net.bind(e,"LMP phone",pSLmp);
           			
   PhoneNumbersIntf found;
   String lookFor;
           			
   lookFor=new String("LMP phone12");
   System.out.println("Looking for "+lookFor);
   found=(PhoneNumbersIntf)net.lookup(a,lookFor);
   if (found==null)
    System.out.println("Not found");
           
   lookFor=new String("LMP phone");
   System.out.println("Looking for "+lookFor);
   found=(PhoneNumbersIntf)net.lookup(a,lookFor);
   if (found==null)
    System.out.println("Not found");
   else
    System.out.println("telephone: "+found.getNumber());
           
   System.out.println("Looking for "+lookFor+" in node specific");
   found=(PhoneNumbersIntf)net.lookup(a,lookFor,e);
   if (found==null)
    System.out.println("Not found");
   else
    System.out.println("telephone: "+found.getNumber());
           
   System.out.println("Removing the link 5");
   new BuildNetLayout("-5",net);
   System.out.println("Looking for "+lookFor+" in node specific");
   found=(PhoneNumbersIntf)net.lookup(a,lookFor,e);
   if (found==null)
    System.out.println("Not found");
   }
   catch(Exception e)
   {
    e.printStackTrace();
   }
  }           
 }
           </pre></font>
           <br>
           <br>
           <br>
           <a name="Execution"><b><i>Executing the application</i></b></a>
           <hr width=50% align=left size=2>
           Before executing the application, the stub must be compiled and generated<br>
           <font size="-1"><pre>
           javac PhoneNumbersIntf.java
           javac PhoneNumbersServer.java
           javac PhoneProof.java
           
           java vnet.local.vnc PhoneNumbersServer
           javac PhoneNumbersServer_VNet.java
           </pre></font>
           It you get any compiler error, probably the <i>classpath</i> has not been properly set. In this case, go to the page 
		   on <a href="availability.htm">Availability</a> to know how to set it. Now, to execute the application:
           <font size="-1"><pre>
           java PhoneProof
           </pre></font>
           The console output for this small program will be:
           <font size="-1"><pre>
Initializing
Creating servers
Creating nodes
Binding servers
Looking for LMP phone12
Not found
Looking for LMP phone
telephone: 763.27.17
Looking for LMP phone in node specific
telephone: 859.82.94
Removing the link 5
Looking for LMP phone in node specific
vnet.CommException: Communication failure
   at vnet.NetNode.checkWay(NetNode.java:277)
   at vnet.NetNode.lookup(NetNode.java:234)
   at vnet.local.VirtualNet.lookup(VirtualNet.java:131)
   at PhoneProof.main(PhoneProof.java:60)
           </pre></font>
           It also generates three windows. Here there are some snapshots (they don't correspond exactly to this example):<br>
           <img src="vnlt1.jpg"> &nbsp;&nbsp;<img src="vnlt2.jpg"><br><br><img src="vnlt3.jpg">
           <br>
           <br>
           <br>
           <br>
           <a name="Download"><b><i>Download the example</i></b></a>
           <hr width=50% align=left size=2>
           <a href="vnetexloc.zip">vnetexloc.zip</a> (5 KB)
           <br>
           Once unzipped this file -and having correctly set the <i>classpath</i>-, to execute the example one simply needs to:
           <font size="-1"><pre>
           java PhoneProof
           </pre></font>
           <br>
           <br>
           <hr width=100% align=center size=2>
		</td></tr></table>
	 </td>
    </tr>
</table>
</body>
</html>
