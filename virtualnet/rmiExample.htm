<html>
<!-- Creation date: 12/04/2002 -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>VirtualNet: network simulation with JavaRMI. RMI example</title>
<meta name="Description" content="VirtualNet">
<meta name="Keywords" content="java RMI network simulation">
<meta name="Author" content="Luis Pena">
<meta name="Generator" content="AceHTML 4 Pro">
</head>
<body>

<table width="95%" border="0">
    <tr>
      <td width="150" align="left" valign="top" bgcolor="#BBBBFF">
	  	<center><br>
	    <font color="#4444ff"><b>VirtualNet</b></font>		
		<table width="92%" border="1" align="center">
		    <tr><td bgcolor="#BBDDDD"><font size="-1"><center>
         		<hr size="1" color="#7777FF" width="95%">				
				<font color="#4444ff"><b>RMI example</b></font><br>
         		<hr size="1" color="#7777FF" width="95%">				
				<a href="index.htm">Overview</a><br>
				<a href="availability.htm">Availability</a><br>
				<a href="interface.htm">Interface</a><br>
				<a href="packages.htm">Packages</a><br>
				<a href="localExample.htm">Local example</a><br>
				<a href="executables.htm">Executables</a><br>
				<a href="versions.htm">Versions</a><br>
         		<hr size="1" color="#7777FF" width="95%">				
			</center></font></td></tr>
		</table>
				
		<hr size="1" color="#7777FF" width="80%">				
		<br>
    	<p><a href="../index.htm">Home</a></p>
    	<p><a href="../filesplit/index.htm">FileSplit</a></p>
    	<p><a href="../idldepend/index.htm">IDL depend</a></p>
    	<p><a href="../menu/index.htm">Menu Applet</a></p>
    	<p><a href="http://grasia.fdi.ucm.es/sensei">Sensei</a></p>
    	<p><a href="../splitimage/index.htm">SplitImage</a></p>
    	<p><a href="../virtualnet2/index.htm">VirtualNet 2</a></p>
		
		<hr size="1" color="#7777FF" width="80%">		
		<a href="mailto:java_lmp@yahoo.co.uk?subject=webpage"><font size="-1">java_lmp@yahoo.co.uk</font></a><br><br>
		<font size="-1"><b><i><font color="#4444ff">Last Updated:<br> 3rd September 2003</font></i></b></font>		
		<hr size="1" color="#7777FF" width="80%">		
	    </center>
	  </td>
		
      <td width="4">
	  </td>

	  
	  <td valign="top">
		<hr size="2" color="#663366" width="400">
        <center><font size="+3" color="#663366"><b><i>VirtualNet <font size="+1">(over RMI)</font></i></b></font></center>
		<hr size="2" color="#663366" width="300">
        <center><font size="+2" color="#663366"><b><i>RMI example</i></b></font></center>
		<hr size="2" color="#663366" width="400">
	
		<br>	    
        <table border="0"><tr><td width="5"></td><td>
          <ul type=square>
          <li><a href="#Server">Creating the server</a>
          <li><a href="#ServerApp">Generating servers</a>
          <li><a href="#ClientApp">Generating clients</a>
          <li><a href="#Execution">Executing the applications</a>
          <li><a href="#Download">Download the example</a>
          </ul>
          <br>
          <a name="Server"><b><i>Creating the server</i></b></a>
          <hr width=50% align=left size=2>
          The remote version of Virtual Net just need a RMI server; there are no special requirements of Virtual Net on the server.<br>
          For this example, the server is going to give only one service: it returns a phone number, those used for its initialization.<br> The code for this interface is:<br>
          <font size="-1"><pre>
public interface PhoneNumbersIntf extends java.rmi.Remote
{
 public String getNumber() throws java.rmi.RemoteException;
}
          </pre></font>
          The code for the server is:
          <font size="-1"><pre>
public class PhoneNumbersServer extends java.rmi.server.UnicastRemoteObject 
  implements PhoneNumbersIntf
{
 public PhoneNumbersServer(String number)  throws java.rmi.RemoteException
 {
  Number=number;
 }
 public String getNumber() throws java.rmi.RemoteException
 {
  return Number;
 }
 String Number;
}
          </pre></font>
          <br>
          <a name="ServerApp"><b><i>Generating servers</i></b></a>
          <hr width=50% align=left size=2>
          The following is the code that generates several servers:<br>
          <font size="-1"><pre>
import java.rmi.Naming;
          
import vnet.remote.Host;
          
public class InsertServers
{
 public static void main(String args[])
 {
  try
  {
   System.out.println("This test expects to have a virtualNet called "
    +"TestA, with 4 nodes C,M,U,Y, with links between C-M, M-U, V-Y");
   System.out.println();
   System.out.println("Getting the hosts...");
   Host C=(Host) Naming.lookup("/TestA/HostC");
   Host M=(Host) Naming.lookup("/TestA/HostM");
   Host U=(Host) Naming.lookup("/TestA/HostU");
   Host Y=(Host) Naming.lookup("/TestA/HostY");
   System.out.println("Binding the servers");
   System.out.println("In M there is a server called LMP");
   M.bind("LMP",new PhoneNumbersServer("763271"));
   System.out.println("In Y there is the same server ,but with a "+
    "different number");
   Y.bind("LMP",new PhoneNumbersServer("859829"));
   System.out.println("In C there is a server, hosted in U, called "+
    "BELLMP (/TestA/HostC/BELLMP");
   U.bind("/TestA/HostC/BELLMP", new PhoneNumbersServer("213207"));
   System.out.println();
   System.out.println();
   System.out.println("Ready");
  }
  catch(Exception ex)
  {
   System.out.println(ex);
  }
 }
}
          </pre></font>
          <br>
          <a name="ClientApp"><b><i>Generating clients</i></b></a>
          <hr width=50% align=left size=2>
          The following is a very small apllication that acts as a client for the previous generated clients.<br>
          <font size="-1"><pre>
import java.rmi.Naming;
          
import vnet.remote.Host;
          
public class CheckServers
{
 public static void main(String args[])
 {
  System.out.println("This test expects to have a virtualNet called TestA, with " +
    " 4 nodes C,M,U,Y, with links between C-M, M-U, V-Y");
  if (args.length!=1)
   System.out.println("This test need an argument: The letter of the host from "+
    "where the tests are done");
  else 
   try
   {
    System.out.println("Getting the host");
    Host host=(Host) Naming.lookup("/TestA/Host"+args[0]);
    PhoneNumbersIntf phone=null;
    System.out.println("getting LMP");
    phone=(PhoneNumbersIntf)host.lookup("LMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting /TestA/HostY/LMP");
    phone=(PhoneNumbersIntf)host.lookup("/TestA/HostY/LMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting /TestA/HostM/LMP");
    phone=(PhoneNumbersIntf)host.lookup("/TestA/HostM/LMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting BELLMP");
    phone=(PhoneNumbersIntf)host.lookup("BELLMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting /TestA/HostC/BELLMP");
    phone=(PhoneNumbersIntf)host.lookup("/TestA/HostC/BELLMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting /TestA/HostU/BELLMP");
    phone=(PhoneNumbersIntf)host.lookup("/TestA/HostU/BELLMP");
    System.out.println("phone: "+phone.getNumber());
   }
   catch(Exception ex)
   {
    System.out.println(ex);
   }
 }
}
          </pre></font>
          <br>
          <a name="Execution"><b><i>Executing the application</i></b></a>
          <hr width=50% align=left size=2>
          In the RMI remote case, there are four parts:
          <ul type=square>
          <li>The RMI system
          <li>The Virtual Net application
          <li>One or more servers
          <li>One or more clients 
          </ul>
          First one has to compile the <i>java</i> files:
          <font size="-1"><pre>
          javac PhoneNumbersIntf.java
          javac PhoneNumbersServer.java
          javac InsertServers.java
          javac CheckServers.java
          </pre></font>
          <br>It you get any compiler error, probably the <i>classpath</i> has not been properly set. In this case, go to the page on <a href="availability.htm">Availability</a> to know how to set it.  Then, we start the RMI registry:<br>
          <font size="-1"><pre>
          start rmiregistry (rmiregistry & in Unix)
          </pre></font>
          Now, we need to have the Virtual Net application, and to initialize a net called TestA that will be used by the servers and clients.<br>
          There are several ways to execute this application. One of them is generating another program that creates an object <i>vnet.remote.VirtualNet</i>.<br>
          Another way is to use one of the two programs hosted in <i>vnet.remote.prg</i>. We will use the graphic version:
          <font size="-1"><pre>
          javaw vnet.remote.prg.GraphMain -init=+C+M+U+Y+MU1+MC2+MY3 -start TestA
          </pre></font>
          The graph of this net is:<br>
          <center><img src="vnrt.jpg"></center><br><br>
          Before executing the server or client applications, you have to generate the stub for the server, and its stub and skeleton:
          <font size="-1"><pre>
          rmic PhoneNumbersServer
          java vnet.remote.vnc PhoneNumbersServer
          javac PhoneNumbersServer_Stub_VNet.java
          rmic PhoneNumbersServer_Stub_VNet
          </pre></font>
          Now, it is already possible to install the servers:
          <font size="-1"><pre>
          java InsertServers
          </pre></font>
          The output of this program will be:
          <font size="-1"><pre>
This test expects to have a virtualNet called TestA, with 4 nodes C,M,U,Y, with
links between C-M, M-U, V-Y
          
Getting the hosts...
Binding the servers
In M there is a server called 
In Y there is the same server ,but with a different number
In C there is a server, hosted in U, called BELLMP (/TestA/HostC/BELLMP
          
Ready
          
          </pre></font>
          Finally, we test the client:
          <font size="-1"><pre>
          java CheckServers C
          </pre></font>
          The ouput is:
          <font size="-1"><pre>
This test expects to have a virtualNet called TestA, with 4 nodes C,M,U,Y, with
links between C-M, M-U, V-Y
Getting the host
getting LMP
phone: 763271
getting /TestA/HostY/LMP
phone: 859829
getting /TestA/HostM/LMP
phone: 763271
getting BELLMP
phone: 213207
getting /TestA/HostC/BELLMP
phone: 213207
getting /TestA/HostU/BELLMP
java.rmi.NotBoundException: /TestA/HostU/BELLMP
		</pre></font>
          <br>
          <a name="Download"><b><i>Download the example</i></b></a>
          <hr width=50% align=left size=2>
          <a href="vnetexrmi.zip">vnetexrmi.zip</a> (10 KB)
          <br>
          Once unzipped this file -and having correctly set the <i>classpath</i>-, to execute the example is just needed to do:
          <font size="-1"><pre>
start rmiregistry (rmiregistry & in Unix)
javaw vnet.remote.prg.GraphMain -init=+C+M+U+Y+MU1+MC2+MY3 -start TestA
start java InsertServers (java InsertServers & in Unix)
java CheckServers C
          </pre></font>
          <br>
          <br>
          <hr width=100% align=center size=2>
		</td></tr></table>
	 </td>
    </tr>
</table>
</body>
</html>
